{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Typestrong Human-Readable Data",
	"scopeName": "source.thrd",
	"patterns_": [
		{
			"include": "#expression"
		},
		{
			"include": "#comments"
		}
	],
	"patterns": [
		{
			"include": "#value"
		}
	],
	"repository": {
		"expression": {
			"name": "meta.expression.thrd",
			"begin": "(\\w+)\\s*(:)",
			"end": ",",
			"beginCaptures": {
				"1": {
					"name": "variable.name.thrd"
				},
				"2": {
					"name": "punctuation.separator.keyValue.thrd"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.separator.list.thrd"
				}
			},
			"patterns": [
				{
					"include": "#value"
				}
			]
		},
		"value": {
			"patterns": [
				{
					"include": "#primitive"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#blocks"
				}
			]
		},
		"blocks": {
			"patterns": [
				{
					"name": "meta.block.dict.thrd",
					"begin": "(\\w+)?\\s*(\\{)",
					"beginCaptures": {
						"1": {
							"name": "support.class.enum.reference.thrd"
						},
						"2": {
							"name": "punctuation.block.begin.dict.thrd"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.block.end.dict.thrd"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.block.arr.thrd",
					"begin": "(\\w+)?\\s*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "support.class.enum.reference.thrd"
						},
						"2": {
							"name": "punctuation.block.begin.arr.thrd"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.block.end.arr.thrd"
						}
					},
					"patterns": [
						{
							"include": "#array-element"
						}
					]
				},
				{
					"name": "meta.block.tuple.thrd",
					"begin": "(\\w+)?\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "support.class.enum.reference.thrd"
						},
						"2": {
							"name": "punctuation.block.begin.tuple.thrd"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.block.end.tuple.thrd"
						}
					},
					"patterns": [
						{
							"include": "#array-element"
						}
					]
				}
			]
		},
		"array-element": {
			"patterns": [
				{
					"match": ",",
					"captures": {
						"0": {
							"name": "punctuation.separator.list.thrd"
						}
					}
				},
				{
					"include": "#value"
				}
			]
		},
		"primitive": {
			"patterns": [
				{
					"include": "#boolean"
				},
				{
					"include": "#integer"
				},
				{
					"include": "#float"
				},
				{
					"include": "#string"
				}
			]
		},
		"boolean": {
			"name": "constant.language.boolean.thrd",
			"match": "true|false"
		},
		"integer": {
			"name": "constant.numeric.integer.thrd",
			"match": "-?\\d+"
		},
		"float": {
			"name": "constant.numeric.float.thrd",
			"match": "-?\\d*\\.\\d+(?:[eE][+-]\\d+)?"
		},
		"string": {
			"patterns": [
				{
					"include": "#string-doublequote"
				},
				{
					"include": "#string-multiline"
				}
			]
		},
		"string-doublequote": {
			"name": "string.inline.thrd",
			"begin": "\"",
			"end": "(\")|((?:[^\\\\\\n])$)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.string.begin.thrd"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.string.end.thrd"
				},
				"2": {
					"name": "invalid.illegal.newline.thrd"
				}
			},
			"patterns": [
				{
					"include": "#escape-string"
				}
			]
		},
		"string-multiline": {
			"name": "string.multiline.thrd",
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.string.begin.thrd"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.string.end.thrd"
				}
			},
			"patterns": [
				{
					"include": "#escape-string"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.thrd",
					"begin": "//",
					"end": "\\n"
				},
				{
					"name": "comment.block.thrd",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"escape-string": {
			"name": "constant.character.escape.string.thrd",
			"match": "\\\\."
		}
	}
}